package org.FenRun;

//import com.shiyi.encrypt.manage.JiangNan_PosMacManage;
//import com.shiyi.encrypt.manage.JiangNan_TermKeyManager;
import org.DB.DESDOUtil;
import org.DB.RSAUtils;
import org.DB.Sha256;
import org.DB.TDES_3DESUtil;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.testng.annotations.Test;

import javax.crypto.Cipher;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESedeKeySpec;
import javax.crypto.spec.IvParameterSpec;
import java.security.Key;
import java.util.*;


/**
 * @author tiger.wang
 * @version 1.0
 * @date 2021/3/15 17:50
 */

public class XiaoWo {

    //@Autowired
    //private RestTemplate restTemplate;
    private static Map<String, String> data = new TreeMap<String, String>();
    private static RestTemplate restTemplate = new RestTemplate();
    static String Url = "http://spos.qianziworth.cn:7781/semp/";
    // 向量
    private final static String iv = "01234567";
    // 加解密统一使用的编码方式
    private final static String encoding = "utf-8";

    private String client_token = "7D54C61F45C2C691";
    private String server_token = "3F2C439E9F84B313";
    private String wordkKey = TypeConvert.xorTwoStrings(client_token, server_token);

    //private JiangNan_TermKeyManager jiangNan_TermKeyManager = new JiangNan_TermKeyManager();

    //计算mac
    //private  JiangNan_PosMacManage jiangNan_PosMacManage = new JiangNan_PosMacManage();


    /**
     * 小喔電簽1.2.8版本交易哦
     */
    @Test
    public void xw_128_tradeTest() {
        String signUrl = Url + "trade.do";

        Date time = new Date();
        Sha256 sha256 = new Sha256();

        String timeMillious = String.valueOf(time.getTime());
        String STR = timeMillious + "1qaz2wsx1qaz2wsx";
        System.out.println(STR);
        String message = sha256.getSHA256(STR);
        System.out.println(message);

        HttpHeaders headers = new HttpHeaders();

        headers.add("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        headers.add("random", timeMillious);
        headers.add("message", message);
        headers.add("appid", "TM000002");
//        CC7193DCC4FEF54648431C6553951F164E74EC8CF02947F1BBD9AA0213C657C39BC929B3EBFB9E2B81227B5EA9A46891CD0A6ECE3FA300287C37786C8FA043CE55E4EE20B727927AEC91F481D1FB7ED6172E4CF32B38AF3C1570EC44A8382FBE9EFDF2C094811C1864A53E36E477DD34869AAA14E047E38CB9B049FFC139CBA0136C5599F0CF3CD571132593F61BEE710A9BC7891773AFF384E49B507B7EF49FD645D8D588811E72C28E155570F092D39024703D421DC6FC1FCF9E686B8E32130B039CACD12B529C4C6FD89727E19D82E57BF792AAA2E22A1907EF8901A3C178D7D2EA37CBE3580CF5BB4DB67F8842DBDD6BC88825B8F053EDDC0EC067A56573D2AB0BB840EF49D70BC48E873349680464BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE2315C1EF54F5CA08625E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFDDCD632ADDBE203A676EC60AED080FA0D81160D98C7316310706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D1960163C3D196503B7C4C6C1B4E6789EF3818BDFECB79F59430997ADF292E7645D513546C84C204052820496215079D45B83668F82A027C3061071AE8581FAB53A3224BC049F9600FC3F7D51F8FCF7F8D43DF5F40FAF1F510065F0E255F167C8D7D0075153DCE72644FD6C08BFBE737E832F5CBD464BFCA7A872F69497D3721FC3485DA45A0660F07F2
//消费100
       HttpEntity<String> request = new HttpEntity("CC7193DCC4FEF54648431C6553951F1671EB9AB00C7DF76AA4764A477590A1C09E2B3AD14FFFA4A2D96DBABCCE3D5C4DD9518281BA70C98C2E13289FD84A5BBC995E482F6009A07B0E4DD10D9D4C3B9CBE3FE214973D2CFCC900C17538F0E0697FD64A5B3D10BF4768B4E03D7CC0C7B603B85996E797134955734A0939987E3CB9B049FFC139CBA049A6E7632922ECCF0FA22D6AA6B9B32219D250FD83003E7384E49B507B7EF49F27B837377371D74FC28E155570F092D39024703D421DC6FC87224BD12B10BA59F64091F268177A318AFBF2F25C1237F3758A3D2EB438E9199D1DB5FDC9C62CF3D7D2EA37CBE3580CF5BB4DB67F8842DBDA21FB30C3B90E2BEDDC0EC067A56573590787E5BF8F56DC644FEA2BA2C1E53864BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE23E2FB018CBE99D93F5E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFD925BCF136EEDE0B6EC7C219CD6A743C5434FA74362AAB330706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D1960163C3D196503B7C4C6C1B4E6789EF3818BDFECB79F594300736E28D63F5DE40E915493DB8CD67FA088262A324F7EF2961BFD222C0D426157D0F96BA4882128846130B97C58B62023058D20403F7EE2D1931DC4E14FACE35AF0A4D07CE81A11EC68E64FCAF2F70E06D1BFC3121127F8B0BED1A4EDE218310E4CF50C617AF51A1769B7EA0171E095C", headers);
        //闪付 1000
     //   HttpEntity<String> request = new HttpEntity("CC7193DCC4FEF54648431C6553951F164E74EC8CF02947F1BBD9AA0213C657C39BC929B3EBFB9E2B81227B5EA9A46891CD0A6ECE3FA300287C37786C8FA043CE55E4EE20B727927AEC91F481D1FB7ED6172E4CF32B38AF3C1570EC44A8382FBE9EFDF2C094811C1864A53E36E477DD34869AAA14E047E38CB9B049FFC139CBA0136C5599F0CF3CD571132593F61BEE710A9BC7891773AFF384E49B507B7EF49FD645D8D588811E72C28E155570F092D39024703D421DC6FC1FCF9E686B8E32130B039CACD12B529C4C6FD89727E19D82E57BF792AAA2E22A1907EF8901A3C178D7D2EA37CBE3580CF5BB4DB67F8842DBDD6BC88825B8F053EDDC0EC067A56573D2AB0BB840EF49D70BC48E873349680464BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE2315C1EF54F5CA08625E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFDDCD632ADDBE203A676EC60AED080FA0D81160D98C7316310706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D1960163C3D196503B7C4C6C1B4E6789EF3818BDFECB79F59430997ADF292E7645D513546C84C204052820496215079D45B83668F82A027C3061071AE8581FAB53A3224BC049F9600FC3F7D51F8FCF7F8D43DF5F40FAF1F510065F0E255F167C8D7D0075153DCE72644FD6C08BFBE737E832F5CBD464BFCA7A872F69497D3721FC3485DA45A0660F07F2", headers);

        ResponseEntity<String> response = restTemplate.postForEntity(signUrl, request, String.class);
        System.out.println(response);
        System.out.println(response.getBody());
    }

    /**
     *主密鑰下載
     */

    @Test
    public void getterminfoTest() {
        String getterminfoUrl = "http://spos.qianziworth.cn:7781/semp/term/getterminfo.do";

        Date time = new Date();
        Sha256 sha256 = new Sha256();

        String timeMillious = String.valueOf(time.getTime());
        String STR = timeMillious + "1qaz2wsx1qaz2wsx";
        System.out.println(STR);
        String message = sha256.getSHA256(STR);
        System.out.println(message);

        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        headers.add("random", timeMillious);
        headers.add("message", message);
        headers.add("appid", "TM000002");

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();

        body.add("appid", "TM000002");
        body.add("version", "v1.0.0");
        body.add("simno", "89860427161891201092");
        body.add("imei", "867258050962816");

        body.add("code", "30694254");
        body.add("sn", "86836040000006");

        //sn=86836040000006&mer=631000015537695&appid=TM000002&version=V1.0.0&imei=867258050962816&simno=89860427161891201092
        HttpEntity<String> request = new HttpEntity(body, headers);

        ResponseEntity<String> response = restTemplate.postForEntity(getterminfoUrl, request, String.class);
        System.out.println(response.getBody());
        System.out.println(response.getBody().contains("mer"));
//
//       JSONObject jsonResponse = restTemplate.postForObject(getterminfoUrl, request, JSONObject.class);
//       System.out.println(jsonResponse);

        //Assert.assertEquals(response.getBody();
    }

    //"field2":	"6229180134516824",
//        "field4":	"000000010000",
//        "field11":	"xf00420210316161235fCGJx4",
//        "field12":	"161236",
//        "field13":	"0316",
//        "field15":	"0316",
//        "field37":	"500010161236",
//        "field38":	"123456",
//        "field39":	"00",
//        "field41":	"66666666",
//        "field42":	"555555555555555",
//        "field44":	"01020000   48311000   ",
//        "field55":	"9F2608A897583003CF0E8E9F2701809F101307010103A00000010A010000000000348877EA9F370417C70C1A9F36020096950500000000009A032103169C01009F02060000000100005F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101029F090200309F410400000181",
//        "field62":	"500010",
//        "dfFlag":	"0"

    /**
     * 簽到
     */
    @Test
    public void signTest() {
        String signUrl = Url + "sign.do";

        Date time = new Date();
        Sha256 sha256 = new Sha256();

        String timeMillious = String.valueOf(time.getTime());
        String STR = timeMillious + "1qaz2wsx1qaz2wsx";
        System.out.println(STR);
        String message = sha256.getSHA256(STR);
        System.out.println(message);

        HttpHeaders headers = new HttpHeaders();

        headers.add("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        headers.add("random", timeMillious);
        headers.add("message", message);
        headers.add("appid", "TM000002");

        String ssb="sn=86836040000006&mer=631000015537695&appid=TM000002&version=V1.0.0&imei=867258050962816&simno=89860427161891201092";
        String Key="B9F9B97117CE8ECEB9F9B97117CE8ECE";//factory表中的protect_key

        try{
            String  enBody = DESDOUtil.encECB3Des(ssb,Key);//簽到加密
            System.out.println("加密后："+enBody);

            HttpEntity<String> request = new HttpEntity(enBody, headers);

            ResponseEntity<String> response = restTemplate.postForEntity(signUrl, request, String.class);
            System.out.println(response);
            System.out.println(response.getBody());
            String responseBody=response.getBody();
            String  deResponseBody = DESDOUtil.decECB3Des(responseBody,Key);
            System.out.println(deResponseBody);



        }catch (Exception e){
            e.getStackTrace();
        }

//                CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E2493BA0A7AFF5D4D8BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D44561097411D390251889C4A603B529EDC8BFFBF162C14FDB29691040355530A9F001112E42CEB35652F4300EE634C8744E2658A70BE685601576DEF29A0863A54BE24C504C433B5162FE0A9B7A2CF65C282DFCFAB8D15A19A4DEFB0F94F503663F37B68EE0718A7A984A50F68117A980CD38213377C11BA528E26488E99F9328976B6D6AFC420AFB3BB1E60BFFD443FA685E3475D3B69D9D4EC6B7E8D4D4862B69FF0075E207E474CD6C35EDCFA41642E30022976A38198F009227D8636506DBBDEABBF211A25E1F1BBB5997CBE87AF1046EE12C658654FC59FA893DE18B2BABE7F7DFD4FA429EF544153C1703474E51B1B24B2D7DF6A95C84E7AF03F989D40CE560C102520DE4E014FF7B8F31CF7DD49F4F65DFF24932B1111E476DB06B99FA4624CB131BA9635255A4ECAC0DF3247425A2AF7EC5413E86CCDF69F9091E791A8D247DEF9A11FB0BC3E68AFEA1F5C6AA07F0C9C7D444963FF8294DE2E80D97FE358898EA78623902A4C151E83811DAB32B4130B247F76055CF049FDB8C3EF92663811136499CC696762A1E9C02063F14C1B8322FCBC646B29F0BC763FE6C3CA4F2D4422535B6FB0E8F9E324B4C430A1BE10C5360A0B64300792C8BC961A71C570567E9E38B300C0BE6CE0EC41C4850307B62923B640242F81CA71323213DA496F782484693E5ABAE189CE445FAA7778C236AEB02A44EC46195CCB6795B13536B65ADCAA53DDD3AC5E7C4365CDCD813991631A7B40FA2FBFCCD527399D8935F62650B8D00D969C48F7D28771AF6F30B8E3
//                CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E2493BA0A7AFF5D4D8BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D44561097411D390251889C4A603B529EDC8BFFBF162C14FDB29691040355530A9F001112E42CEB35652F4300EE634C8744E2658A70BE685601576DEF29A0863A54BE24C504C433B5162FE0A9B7A2CF65C282DFCFAB8D15A19A4DEFB0F94F503663F37B68EE0718A7A984A50F68117A980CD38213377C11BA528E26488E99F9328976B6D6AFC420AFB3BB1E60BFFD443FA685E3475D3B69D9D4EC6B7E8D4D4862B69FF0075E207E474CD6C35EDCFA41642E30022976A38198F009227D8636506DBBDEABBF211A25E1F1BBB5997CBE87AF1046EE12C658654FC59FA893DE18B2BABE7F7DFD4FA429EF544153C1703474E51B1B24B2D7DF6A95C84E7AF03F989D40CE560C102520DE4E014FF7B8F31CF7DD49F4F65DFF24932B1111E476DB06B99FA4624CB131BA9635255A4ECAC0DF3247425A2AF7EC5413E86CCDF69F9091E791A8D247DEF9A11FB0BC3E68AFEA1F5C6AA07F0C9C7D444963FF8294DE2E80D97FE358898EA78623902A4C151E83811DAB32B4130B247F76055CF049FDB8C3EF92663811136499CC696762A1E9C02063F14C1B8322FCBC646B29F0BC763FE6C3CA4F2D4422535B6FB0E8F9E324B4C430A1BE10C5360A0B64300792C8BC961A71C570567E9E38B300C0BE6CE0EC41C4850307B62923B640242F81CA71323213DA496F782484693E5ABAE189CE445FAA7778C236AEB02A44EC46195CCB6795B13536B65ADCAA53DDD3AC5E7C4365CDCD813991631A7B40FA2FBFCCD527399D8935F62650B8D00D969C48F7D28771AF6F30B8E3
//
//                CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E2615FAA6D30782FBCBE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D443A65E0A61534DB462B67A96FD36A5285A83384E829AA572555557761AB2D9579CE377106128941B0E07EE742FB19356545164BA96463D4DE2D4C8EEDEB6888DE761C697966FC66E92FE0A9B7A2CF65C2BE7125144A895A46E0A95B7C8333CF5D9595509DCB731D154FA30650C6CD36DA0B51CB3186E07D7B696A836A08BF6202CE53C85775171A45DF3BF6B909EFA39D511E8FC7FBACDBB5A4CCCB826C0904BDCD597CD30567CF60B428FDF24EF979FF54224D8A85EF8A79CB477A511F1474832417E8EDAD886EA7696A836A08BF620201BFAC21D52CC8BC9A372CF2A2916CC693F2B1F31A54B174E478982BF6345D5A8294DE2E80D97FE39EFEA07CB91736430C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE23E73D8B7B7D057A52ED9562C2E51102AE48DD504903C67B90F78C9EB561ECF196A3B4299CD470C94DB12E396CBF0DEE751FBC38E31385A73E8145B04230D649DBE0A0A1001FC50D314679B909ED41F070F8B062FE13FF21C472B9D2C2D4C07069A07D9AA9466F8FCA8A6A6E926F23E1EF0B1347DB072A90764C6B57CF3C9D2A8422A730DDC58EA7BE481769C3CA9365E194842FD10305F5872B185703CAB007A54007E68B6CE28004EE3C7BE338EC109255A2F68C04096BAFB5C7174EC1E7AE8E1D5E4B555C40ADB86D1D54CAB02DBCE503DB0CB156609BE0ECBC729C8854C09EA91AF88F286BDD20D57D4DE4E274C370807BA7DFAD62763A474402BF5613BF18308B4F40856F20DDC6990A8E3CE6C1EB
//                CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E277D91B1D5D0D38B5BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D443A65E0A61534DB462B67A96FD36A52854B3CA4933FE8B28AFCDA2E0760931841AA08E10C9661D850E07EE742FB19356545164BA96463D4DE2D4C8EEDEB6888DE761C697966FC66E92FE0A9B7A2CF65C240B285D90A6F6D51112BE8F304076A197324082ABD841AE64FA30650C6CD36DA7175AE0E1956FE00696A836A08BF6202CE53C85775171A45DF3BF6B909EFA39D511E8FC7FBACDBB5A4CCCB826C0904BDCD597CD30567CF60B428FDF24EF979FF54224D8A85EF8A79CB477A511F1474832417E8EDAD886EA7696A836A08BF620201BFAC21D52CC8BC9A372CF2A2916CC693F2B1F31A54B174E478982BF6345D5A8294DE2E80D97FE39EFEA07CB91736430C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE23DAB2A7653D417CD3ED9562C2E51102AE48DD504903C67B90F78C9EB561ECF196A3B4299CD470C94DB12E396CBF0DEE751FBC38E31385A73E8145B04230D649DBE0A0A1001FC50D314679B909ED41F070F8B062FE13FF21C472B9D2C2D4C07069A07D9AA9466F8FCA8A6A6E926F23E1EF0B1347DB072A90764C6B57CF3C9D2A8422A730DDC58EA7BE481769C3CA9365E194842FD10305F587DBF13D36BA0973A84007E68B6CE28004EE3C7BE338EC109255A2F68C04096BAFB5C7174EC1E7AE8E1D5E4B555C40ADB86D1D54CAB02DBCE503DB0CB156609BE0ECBC729C8854C09EA91AF88F286BDD20D57D4DE4E274C370807BA7DFAD62763A89C4353008A1171501C0BFD98877C4B55A6D90DF25D3B595
//                CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E29501724888337E54BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D443A65E0A61534DB462B67A96FD36A5285F6D6B44E8839428C3950B865046EE8D3BC643091711FDBFFE07EE742FB19356545164BA96463D4DE2D4C8EEDEB6888DE761C697966FC66E92FE0A9B7A2CF65C2BCC39A5DC370367ACED1F644921EA8D095F2A480D19A84F64FA30650C6CD36DA35E76D97B405D6EA696A836A08BF6202CE53C85775171A45DF3BF6B909EFA39D511E8FC7FBACDBB5A4CCCB826C0904BDCD597CD30567CF60B428FDF24EF979FF54224D8A85EF8A79CB477A511F1474832417E8EDAD886EA7696A836A08BF620201BFAC21D52CC8BC9A372CF2A2916CC693F2B1F31A54B174E478982BF6345D5A8294DE2E80D97FE39EFEA07CB91736430C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE239CB9260DE3102831ED9562C2E51102AE48DD504903C67B90F78C9EB561ECF196A3B4299CD470C94DB12E396CBF0DEE751FBC38E31385A73E8145B04230D649DBE0A0A1001FC50D314679B909ED41F070F8B062FE13FF21C472B9D2C2D4C07069A07D9AA9466F8FCA8A6A6E926F23E1EF0B1347DB072A90764C6B57CF3C9D2A8422A730DDC58EA7BE481769C3CA9365E194842FD10305F587DBF13D36BA0973A84007E68B6CE28004EE3C7BE338EC109255A2F68C04096BAFB5C7174EC1E7AE8E1D5E4B555C40ADB86D1D54CAB02DBCE503DB0CB156609BE0ECBC729C8854C09EA91AF88F286BDD20D57D4DE4E274C370807BA7DFAD62763AAB91452DD62F037A39BE9C6B77D0C835E5AA4235783F5435
    }


    /**
     * 刷卡交易
     */
    @Test
    public void tradeTest() {
        String signUrl = Url + "trade.do";

        Date time = new Date();
        Sha256 sha256 = new Sha256();

        String timeMillious = String.valueOf(time.getTime());
        String STR = timeMillious + "1qaz2wsx1qaz2wsx";
        System.out.println(STR);
        String message = sha256.getSHA256(STR);
        System.out.println(message);

        HttpHeaders headers = new HttpHeaders();

        headers.add("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        headers.add("random", timeMillious);
        headers.add("message", message);
        headers.add("appid", "TM000002");
//
//        MultiValueMap<String, Object> body = new LinkedMultiValueMap();
//        body.add("appid", "TM000002");
//        body.add("version", "v1.0.2");
//        body.add("simno", "18B6F741D9C5");
//        body.add("imei", "867258050054580");
//
//        body.add("mer", "631000015537683");
//        body.add("mkey", "vpt0");
//        body.add("sn", "86850030000021");

        //CC7193DCC4FEF5465CA65CC91D7BBEF1D0BCF66F677A58E2493BA0A7AFF5D4D8BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D44561097411D390251889C4A603B529EDC8BFFBF162C14FDB29691040355530A9F001112E42CEB35652F4300EE634C8744E2658A70BE685601576DEF29A0863A54BE24C504C433B5162FE0A9B7A2CF65C282DFCFAB8D15A19A4DEFB0F94F503663F37B68EE0718A7A984A50F68117A980CD38213377C11BA528E26488E99F9328976B6D6AFC420AFB3BB1E60BFFD443FA685E3475D3B69D9D4EC6B7E8D4D4862B69FF0075E207E474CD6C35EDCFA41642E30022976A38198F009227D8636506DBBDEABBF211A25E1F1BBB5997CBE87AF1046EE12C658654FC59FA893DE18B2BABE7F7DFD4FA429EF544153C1703474E51B1B24B2D7DF6A95C84E7AF03F989D40CE560C102520DE4E014FF7B8F31CF7DD49F4F65DFF24932B1111E476DB06B99FA4624CB131BA9635255A4ECAC0DF3247425A2AF7EC5413E86CCDF69F9091E791A8D247DEF9A11FB0BC3E68AFEA1F5C6AA07F0C9C7D444963FF8294DE2E80D97FE358898EA78623902A4C151E83811DAB32B4130B247F76055CF049FDB8C3EF92663811136499CC696762A1E9C02063F14C1B8322FCBC646B29F0BC763FE6C3CA4F2D4422535B6FB0E8F9E324B4C430A1BE10C5360A0B64300792C8BC961A71C570567E9E38B300C0BE6CE0EC41C4850307B62923B640242F81CA71323213DA496F782484693E5ABAE189CE445FAA7778C236AEB02A44EC46195CCB6795B13536B65ADCAA53DDD3AC5E7C4365CDCD813991631A7B40FA2FBFCCD527399D8935F62650B8D00D969C48F7D28771AF6F30B8E3

        HttpEntity<String> request = new HttpEntity("CC7193DCC4FEF54648431C6553951F1671EB9AB00C7DF76A6AE7C7BD4A0FF4379E2B3AD14FFFA4A2D96DBABCCE3D5C4DD9518281BA70C98C2E13289FD84A5BBC995E482F6009A07B0E4DD10D9D4C3B9CBE3FE214973D2CFCC900C17538F0E0697FD64A5B3D10BF4768B4E03D7CC0C7B603B85996E7971349501C4768C0E80844B9B049FFC139CBA064BBE34F259328A9EA46D93DF9D6038E791D286B4271613784E49B507B7EF49F27B837377371D74FC28E155570F092D39024703D421DC6FCFD9F78FB5509E4F6F23585F81F5581449404B28B9196EB7B3727795AFB4CB63EF9715F7A32769D73D7D2EA37CBE3580CF5BB4DB67F8842DBDA21FB30C3B90E2BEDDC0EC067A56573590787E5BF8F56DC3F7D1B4ACFF4360F64BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE234B2ED2B5A622D2315E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFD925BCF136EEDE0B6EC7C219CD6A743C5434FA74362AAB330706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D19646F94EE7EF839EBA17C852F0BF3CA19B06857E3E3163FA99833CAAA925129306EFB75F42037B81136651024391DC9D78EFCCFD690BC818BE1AE721CDD17C8BA12B35575CC386164570929C77063D84A63812C00C0475A4B1D951E8355DA4782F026A210DE9499275E15BFE5FB8E486162BF139696B7CD74E3DCF9ED4DFD3448354C35E9CD48A53EDFACDAE8945DE49B5562716F3B2DD2C987FF05A7129CE7464D2D5D08689DDCB7788D68D4A239856AE68EE7D8259D0D41A", headers);

        ResponseEntity<String> response = restTemplate.postForEntity(signUrl, request, String.class);
        System.out.println(response);
        System.out.println(response.getBody());
    }



//
//    appid=TM000001&f11=000211&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=12325&f55=9F26089AE43BAFB71CEA339F2701809F101307010103A00000010A0100000000008C0536F89F3704539C855C9F36020024950500000000009A032103229C01009F02060000000123255F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101019F090200309F410400000211&f59=109PI104040230320512303030303036303236323832363236313532060639383038343807083941454144413339080876312E302E322020&imei=867258050054580&loc=18BE,E75CBA4,460,00&mer=631000015537683&mkey=vpt0&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2
//    appid=TM000001&f11=000211&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=12325&f55=9F26089AE43BAFB71CEA339F2701809F101307010103A00000010A0100000000008C0536F89F3704539C855C9F36020024950500000000009A032103229C01009F02060000000123255F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101019F090200309F410400000211&f59=109PI104040230320512303030303036303236323832363236313532060639383038343807083941454144413339080876312E302E322020&imei=867258050054580&loc=18BE,E75CBA4,460,00&mer=631000015537683&mkey=vpt0&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2
//    appid=TM000001&f11=000216&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=12335&f55=9F26087E706B6338C31AFD9F2701809F101307010103A00000010A010000000000A3E0E3DF9F3704E183CA819F36020026950500000000009A032103229C01009F02060000000123355F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101019F090200309F410400000216&f59=109PI104040230320512303030303036303236323832363236313532060639383038343807083941454144413339080876312E302E322020&imei=867258050054580&loc=18BE,E75CBA4,460,00&mer=631000015537683&mkey=vpt0&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2
//    appid=TM000001&f11=000212&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=33333&f55=9F2608738FC9C02A53A0199F2701809F101307010103A00000010A01000000000075F994199F370494CDD0C89F36020025950500000000009A032103229C01009F02060000000333335F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101019F090200309F410400000212&f59=109PI104040230320512303030303036303236323832363236313532060639383038343807083941454144413339080876312E302E322020&imei=867258050054580&loc=18BE,E75CBA4,460,00&mer=631000015537683&mkey=vpt0&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2

    @Test
    public void EncodeTest(){

        data.put("merchant_no", "18121011463065tk6T");
        data.put("pageNum", "1");
        data.put("pageSize", "10");
        StringBuilder sb = new StringBuilder();
        Set<String> keySet = data.keySet();
        Iterator<String> iter = keySet.iterator();
        while (iter.hasNext()) {
            String key = iter.next();
            sb.append(key);
            sb.append("=");
            sb.append(data.get(key));
            if (iter.hasNext())
                sb.append("&");
        }
        String sign_hash = EncryptUtil.sha2EncryptToBase64(sb.toString());

        System.out.println(sign_hash);

        sb.append("&sign_hash=");
        sb.append(sign_hash);

        //String ssb="appid=TM000001&f11=000216&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=12335&f55=9F26087E706B6338C31AFD9F2701809F101307010103A00000010A010000000000A3E0E3DF9F3704E183CA819F36020026950500000000009A032103229C01009F02060000000123355F2A02015682027C009F1A0201569F03060000000000009F3303E0F9C89F3501229F1E0838323632363135328408A0000003330101019F090200309F410400000216&f59=109PI104040230320512303030303036303236323832363236313532060639383038343807083941454144413339080876312E302E322020&imei=867258050054580&loc=18BE,E75CBA4,460,00&mer=631000015537683&mkey=vpt0&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2";

        String ssb="appid=TM000002&f11=000056&f14=2404&f2=6217001210049980848&f22=03&f23=001&f35=6217001210049980848D24042203141020000&f4=00018880&f55=9F2608F048C855BBD6914D9F2701809F101307010103A00000010A0100000000009B09F62E9F3704110F2B729F36020040950500000000009A032103309C01009F02060000000125805F2A02015682027C009F1A0201569F03060000000000009F330390C8C09F34030000009F3501229F1E0831323334353637388408A0000003330101019F090200309F410400000003&f59=A207301002020202400002402718683604000000603006980848040084BBC98430500821030101&imei=867258050962816&loc=18BE,E75CBA4,460,00&locAddition=18BE,E75CBA1,460,00|18BE,C33841,460,00&mer=631000015537695&mkey=vpt0&psim=0&pvip=0&simno=89860427161891201092&sn=86836040000006&version=V1.0.0&mac=8F8F8365517A8D37";
        String Key="D9704B6E976903C1";
        try{
          //  String enStringdata = DESDOUtil.encECB3Des(ssb,Key);//trade.do 也用次方法加密
           // System.out.println("enStringdata:"+enStringdata);


           // String[] keyInfo = jiangNan_TermKeyManager.getTermKey("0201");
            //System.out.println("KEYINFO:"+keyInfo);

           String MAB="appid=TM000002&f11=000066&f14=2206&f2=6258101653285496&f22=03&f23=001&f35=6258101653285496D22062010000024300000&f4=00018000&f55=9F260865FDAA8D2333C0069F2701809F101307010103A00000010A0100000000008593D9109F3704DEC577879F36020012950500000000009A032103319C01009F02060000000180005F2A02015682027C009F1A0201569F03060000000000009F330390C8C09F34030000009F3501229F1E0831323334353637388408A0000003330101029F090200309F410400000003&f59=A207301002020202400002402718683604000000603006285496040089DC6F7420500821030101&imei=867258050962816&loc=18BE,E75CBA4,460,00&mer=631000015537695&mkey=vpt0&psim=0&pvip=0&simno=89860427161891201092&sn=86836040000006&version=V1.0.0";
           //String des_mac = jiangNan_PosMacManage.getMac("CF9323DF4480047A", MAB);
//441DA664FF0002AD
           // System.out.println("mac:"+des_mac);

   //                 CC7193DCC4FEF54648431C6553951F1671EB9AB00C7DF76A6AE7C7BD4A0FF4379E2B3AD14FFFA4A2D96DBABCCE3D5C4DD9518281BA70C98C2E13289FD84A5BBC995E482F6009A07B0E4DD10D9D4C3B9CBE3FE214973D2CFCC900C17538F0E0697FD64A5B3D10BF4768B4E03D7CC0C7B603B85996E7971349501C4768C0E80844B9B049FFC139CBA064BBE34F259328A9EA46D93DF9D6038E791D286B4271613784E49B507B7EF49F27B837377371D74FC28E155570F092D39024703D421DC6FCFD9F78FB5509E4F6F23585F81F5581449404B28B9196EB7B3727795AFB4CB63EF9715F7A32769D73D7D2EA37CBE3580CF5BB4DB67F8842DBDA21FB30C3B90E2BEDDC0EC067A56573590787E5BF8F56DC3F7D1B4ACFF4360F64BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE234B2ED2B5A622D2315E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFD925BCF136EEDE0B6EC7C219CD6A743C5434FA74362AAB330706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D19646F94EE7EF839EBA17C852F0BF3CA19B06857E3E3163FA99833CAAA925129306EFB75F42037B81136651024391DC9D78EFCCFD690BC818BE1AE721CDD17C8BA12B35575CC386164570929C77063D84A63812C00C0475A4B1D951E8355DA4782F026A210DE9499275E15BFE5FB8E486162BF139696B7CD74E3DCF9ED4DFD3448354C35E9CD48A53EDFACDAE8945DE49B5562716F3B2DD2C987FF05A7129CE7464D2D5D08689DDCB7788D68D4A239856AE68EE7D8259D0D41A
    //                CC7193DCC4FEF54648431C6553951F1671EB9AB00C7DF76A6AE7C7BD4A0FF4379E2B3AD14FFFA4A2D96DBABCCE3D5C4DD9518281BA70C98C2E13289FD84A5BBC995E482F6009A07B0E4DD10D9D4C3B9CBE3FE214973D2CFCC900C17538F0E0697FD64A5B3D10BF4768B4E03D7CC0C7B603B85996E7971349501C4768C0E80844B9B049FFC139CBA064BBE34F259328A9EA46D93DF9D6038E791D286B4271613784E49B507B7EF49F27B837377371D74FC28E155570F092D39024703D421DC6FCFD9F78FB5509E4F6F23585F81F5581449404B28B9196EB7B3727795AFB4CB63EF9715F7A32769D73D7D2EA37CBE3580CF5BB4DB67F8842DBDA21FB30C3B90E2BEDDC0EC067A56573590787E5BF8F56DC3F7D1B4ACFF4360F64BD4D0B8168FDBF76FC63C3331CB884F02EE353F86027F14E96F0AD47D4E1282FE0A9B7A2CF65C28BFB055E1A9FCF36602758C886A4A167DBA56EC1CA09B11B1747A2F7B68C69B893F2B1F31A54B174FBBA35EBC355D0C744E80FBCBF70C41C4E2868222E04DC550C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE234B2ED2B5A622D2315E46D526AF0660C2933951A94B8931EE345A0499F237803A59EA5C1F5AB96868E1925C4EDA2FB3995B508178E08F12EFD925BCF136EEDE0B6EC7C219CD6A743C5434FA74362AAB330706ABC4FA7FA7E24252EDB33852A96A58D5C83B3723633A36029BE2C86D77E1915AAC6ECE14EE9BADE49E6059F1D19646F94EE7EF839EBA17C852F0BF3CA19B06857E3E3163FA99833CAAA925129306EFB75F42037B81136651024391DC9D78EFCCFD690BC818BE1AE721CDD17C8BA12B35575CC386164570929C77063D84A63812C00C0475A4B1D951E8355DA4782F026A210DE9499275E15BFE5FB8E486162BF139696B7CD74E3DCF9ED4DFD3448354C35E9CD48A53EDFACDAE8945DE49B5562716F3B2DD2C987FF05A7129CE7464D2D5D08689DDCB7788D68D4A239856AE68EE7D8259D0D41A
        }catch (Exception e){e.getStackTrace();}


        //String[] keyInfo = jiangNan_TermKeyManager.getTermKey("B9F9B97117CE8ECEB9F9B97117CE8ECE");




    }

    /**
     * 3DES加密
     *
     * @param plainText 普通文本
     * @return
     * @throws Exception
     */
    public static String encode(String plainText, String secretKey) throws Exception {
        Key deskey = null;
        secretKey = secretKey + secretKey.substring(0, 8);
        DESedeKeySpec spec = new DESedeKeySpec(secretKey.getBytes());
        SecretKeyFactory keyfactory = SecretKeyFactory.getInstance("desede");
        deskey = keyfactory.generateSecret(spec);
        Cipher cipher = Cipher.getInstance("desede/CBC/PKCS5Padding");
        IvParameterSpec ips = new IvParameterSpec(iv.getBytes());
        cipher.init(Cipher.ENCRYPT_MODE, deskey, ips);
        byte[] encryptData = cipher.doFinal(plainText.getBytes(encoding));
        return RSAUtils.encryptBASE64(encryptData);
    }

    /**
     * 3DES解密
     *
     * @param encryptText 加密文本
     * @return
     * @throws Exception
     */
    public static String decode(String encryptText, String secretKey) throws Exception {
        Key deskey = null;
        secretKey = secretKey + secretKey.substring(0, 8);
        DESedeKeySpec spec = new DESedeKeySpec(secretKey.getBytes());
        SecretKeyFactory keyfactory = SecretKeyFactory.getInstance("desede");
        deskey = keyfactory.generateSecret(spec);
        Cipher cipher = Cipher.getInstance("desede/CBC/PKCS5Padding");
        IvParameterSpec ips = new IvParameterSpec(iv.getBytes());
        cipher.init(Cipher.DECRYPT_MODE, deskey, ips);
        byte[] decryptData = cipher.doFinal(RSAUtils.decryptBASE64(encryptText));
        return new String(decryptData, encoding);
    }

//&mac=C1AD2BD88E43A637
    @Test
    public void encodeTest() {
        //String plainText = "appid=TM000001&version=v1.0.2&simno=18B6F741D9C5&imei=867258050054580&mer=631000015537683";
        String plainText="appid=TM000002&f11=000031&f14=2502&f2=6221682120793810&f22=03&f23=001&f35=6221682120793810D25022010000018900000&f4=00008888&f55=9F2608B5E645713BB0733E9F2701809F101307020103A00000010A010000000000C4E4A7FC9F3704419C532B9F36020020950500000000009A032103299C01009F02060000000088885F2A02015682027C009F1A0201569F03060000000000009F330390C8C09F34030000009F3501229F1E0831323334353637388408A0000003330101029F090200309F410400000001&f59=A2073010020202024000024027186836040000006030067938100400894FBCA0A0500821030101&imei=867258050962816&loc=18BE,E75CBA1,460,00&mer=631000015537695&mkey=vpt0&psim=0&pvip=0&simno=89860427161891201092&sn=86836040000006&version=V1.0.0&mac=775B00177D495619";

        //                     appid=TM000001&imei=867258050054580&mer=631000015537683&simno=18B6F741D9C5&sn=86850030000021&version=v1.0.2
        String secretKey = "B9F9B97117CE8ECEB9F9B97117CE8ECE";
        //XiaoWo xiaowo=new XiaoWo();
        try {
            String ss = TDES_3DESUtil.decode (plainText, secretKey);
            System.out.println(ss);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    @Test
    public void decodeTest() {
                          //CC7193DCC4FEF5465CA65CC91D7BBEF1B502D713D7E2CDED06866FD5837E78F4BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D443B850304B134FCF9AC84472DD70E876EBDD53BAF874CAB763AB8348BD37C03AE983A083537E7FA8DE07EE742FB19356545164BA96463D4DE2D4C8EEDEB6888DE761C697966FC66E92FE0A9B7A2CF65C2A42F202E0598958306615AD32D7EA179E856D007CB4D54014FA30650C6CD36DA90C1837D0288511C696A836A08BF6202CE53C85775171A45EDE46D27963FA7C9511E8FC7FBACDBB5631288E256130B057AB9BC35DEA3A286B428FDF24EF979FF54224D8A85EF8A79CB477A511F1474832417E8EDAD886EA7696A836A08BF620201BFAC21D52CC8BC9A372CF2A2916CC693F2B1F31A54B174E478982BF6345D5A8294DE2E80D97FE39EFEA07CB91736430C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE236B1918FD6B47E15CED9562C2E51102AE48DD504903C67B90F78C9EB561ECF196A3B4299CD470C94DB12E396CBF0DEE751FBC38E31385A73E8145B04230D649DBE0A0A1001FC50D314679B909ED41F070F8B062FE13FF21C472B9D2C2D4C07069A07D9AA9466F8FCA8A6A6E926F23E1EF0B1347DB072A90764C6B57CF3C9D2A8422A730DDC58EA7BE481769C3CA9365E194842FD10305F5872B185703CAB007A54007E68B6CE28004EE3C7BE338EC109255A2F68C04096BAFB5C7174EC1E7AE8E1D5E4B555C40ADB86D1D54CAB02DBCE503DB0CB156609BE0ECBC729C8854C09EA91AF88F286BDD20D57D4DE4E274C370807BA7DFAD62763A3A6AB8C7B2304072501165E36B79C8EE5835311E7B745A89
        String plainText = "CC7193DCC4FEF5465CA65CC91D7BBEF1B502D713D7E2CDED493BA0A7AFF5D4D8BE3FE214973D2CFCC900C17538F0E06930D2C3EC671EB038B9A9FFDAD96F89AFF986BC5D1EBEFD8ABAD4CBAC1B03AC91F7D99E592E3BD8A3D93F08D172E03A6F2F607F19500E8D443B850304B134FCF9E81ADDA52248BE3CC65C4D3A9AD8CB62567577E8066AFA64B56387BBC9B4C6BFE07EE742FB19356545164BA96463D4DE2D4C8EEDEB6888DE761C697966FC66E92FE0A9B7A2CF65C21D48FB79887D43FDB16BEEB73573AC3AC2C91DDD7165A34B4FA30650C6CD36DAB44965B7EA6A9050696A836A08BF6202CE53C85775171A45EDE46D27963FA7C9511E8FC7FBACDBB5B57A73C43D3BFF007AB9BC35DEA3A286B428FDF24EF979FF54224D8A85EF8A79CB477A511F1474832417E8EDAD886EA7696A836A08BF620201BFAC21D52CC8BC9A372CF2A2916CC693F2B1F31A54B174E478982BF6345D5A8294DE2E80D97FE39EFEA07CB91736430C6896B10BBB25576A8E73DA2C8A9A8DC567EF21D2F5D4DEDCAF149CBA5EDE23043F6899629C64E2ED9562C2E51102AE48DD504903C67B90F78C9EB561ECF196A3B4299CD470C94DB12E396CBF0DEE751FBC38E31385A73E8145B04230D649DBE0A0A1001FC50D314679B909ED41F070F8B062FE13FF21C472B9D2C2D4C07069A07D9AA9466F8FCA8A6A6E926F23E1EF0B1347DB072A90764C6B57CF3C9D2A8422A730DDC58EA7BE481769C3CA9365E194842FD10305F5872B185703CAB007A54007E68B6CE28004EE3C7BE338EC109255A2F68C04096BAFB5C7174EC1E7AE8E1D5E4B555C40ADB86D1D54CAB02DBCE503DB0CB156609BE0ECBC729C8854C09EA91AF88F286BDD20D57D4DE4E274C370807BA7DFAD62763A3A6AB8C7B2304072501165E36B79C8EE5835311E7B745A89";
        String secretKey = "B9F9B97117CE8ECEB9F9B97117CE8ECE";
        //XiaoWo xiaowo=new XiaoWo();
        try {
            String ss = DESDOUtil.decECB3Des (plainText, secretKey);
            System.out.println(ss);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void main(String[] args) {


    }

}
